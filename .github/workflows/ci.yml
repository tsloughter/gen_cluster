name: CI

on:
  pull_request:
    branches:
      - 'main'
  push:
    branches:
      - 'main'

jobs:
  build:
    name: Test on OTP ${{ matrix.otp_version }} and ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        otp_version: ['27']
        rebar3_version: ['3.24']
        os: [ubuntu-latest]
    env:
      OTP_VERSION: ${{ matrix.otp_version }}
    steps:
    - uses: actions/checkout@v4

    - uses: erlef/setup-beam@v1
      with:
        otp-version: ${{ matrix.otp_version }}
        rebar3-version: ${{ matrix.rebar3_version }}

    - uses: actions/cache@v4
      name: Cache
      with:
        path: |
          _build
        key: ${{ runner.os }}-build-${{ matrix.otp_version }}-${{ hashFiles(format('rebar.lock')) }}-1
        restore-keys: |
          ${{ runner.os }}-build-${{ matrix.otp_version }}-1-

    - name: Compile
      run: rebar3 compile

    # - name: Common Test tests
    #   run: rebar3 ct --cover

    # - name: Publish Test Report
    #   uses: mikepenz/action-junit-report@v5
    #   if: always() # always run even if the previous step fails
    #   with:
    #     report_paths: '_build/test/logs/*/junit_report.xml'

    # - name: Covertool
    #   if: ${{ always() }}
    #   run: rebar3 covertool generate

    # - uses: codecov/codecov-action@v4
    #   if: ${{ always() }}
    #   with:
    #     file: _build/test/covertool/gen_cluster.covertool.xml
    #     env_vars: OTP_VERSION
    #     token: ${{ secrets.CODECOV_TOKEN }}

    - name: XRef
      run: rebar3 xref

    - name: Dialyzer
      run: rebar3 dialyzer

    - name: Download elp
      run: |
        wget https://github.com/WhatsApp/erlang-language-platform/releases/download/2024-11-07/elp-linux-x86_64-unknown-linux-gnu-otp-26.2.tar.gz
        tar xvf elp-linux-x86_64-unknown-linux-gnu-otp-26.2.tar.gz

    # NOTE: As of release 2024-11-07 this *always* returns 0 so is sort of
    # useless unless manually checked in logs
    - name: eqWAlizer
      run: ./elp eqwalize-all

    - name: Install Kind
      uses: helm/kind-action@v1.10.0
      with:
        install_only: true


    - name: Install Kustomize
      run: |
        wget "https://raw.githubusercontent.com/kubernetes-sigs/kustomize/master/hack/install_kustomize.sh"
        rm -f /usr/local/bin/kustomize
        bash install_kustomize.sh /usr/local/bin

    - name: Install ctlptl
      run: |
        CTLPTL_VERSION="0.8.36"
        CTLPTL_FILE_NAME="ctlptl.$CTLPTL_VERSION.linux.x86_64.tar.gz"
        curl -fsSL https://github.com/tilt-dev/ctlptl/releases/download/v$CTLPTL_VERSION/$CTLPTL_FILE_NAME | \
          tar -xzv -C /usr/local/bin ctlptl


    - name: Test in K8s
      shell: bash
      run: |
        set -eux

        cd examples/k8s_erlang_cluster
        ctlptl apply -f cluster.yaml

        docker build -t localhost:5005/k8s_erlang_cluster:latest .
        docker push localhost:5005/k8s_erlang_cluster:latest

        kubectl apply -k deployment/base

        sleep 3

        kubectl wait \
                --for=condition=Available --timeout=300s -n k8s-erlang-cluster deployment/k8s-erlang-cluster

        LENGTH=`kubectl exec -n k8s-erlang-cluster deployment/k8s-erlang-cluster -- bin/k8s_erlang_cluster eval 'length(nodes()).'`

        # fail if all 3 nodes aren't connected together, meaning
        # the call to nodes() would have returned a list of a
        # different size than 2
        if [ ${LENGTH} != 2 ] ; then exit 1 ; fi
